Using cuda device
Wrapping the env with a `Monitor` wrapper
Wrapping the env in a DummyVecEnv.
Logging to runs\SAC_32
Traceback (most recent call last):
  File "D:/Programs/Jetbrains/SoftwareFiles/apps/PyCharm-P/ch-0/231.9011.38/plugins/python/helpers/pydev/pydevd.py", line 1496, in _exec
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "D:\Programs\Jetbrains\SoftwareFiles\apps\PyCharm-P\ch-0\231.9011.38\plugins\python\helpers\pydev\_pydev_imps\_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "G:\Projects\AutoNav\FRCEnv\test-sac.py", line 29, in <module>
    model.learn(int(LEARNING_STEPS), callback=WandbCallback(gradient_save_freq=1000))
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\sac\sac.py", line 307, in learn
    return super().learn(
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\common\off_policy_algorithm.py", line 347, in learn
    self.train(batch_size=self.batch_size, gradient_steps=gradient_steps)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\sac\sac.py", line 222, in train
    actions_pi, log_prob = self.actor.action_log_prob(replay_data.observations)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\sac\policies.py", line 173, in action_log_prob
    mean_actions, log_std, kwargs = self.get_action_dist_params(obs)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\sac\policies.py", line 155, in get_action_dist_params
    features = self.extract_features(obs, self.features_extractor)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\common\policies.py", line 131, in extract_features
    return features_extractor(preprocessed_obs)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Maxim\AppData\Roaming\Python\Python38\site-packages\stable_baselines3\common\torch_layers.py", line 277, in forward
    encoded_tensor_list.append(extractor(observations[key]))
KeyError: 'achieved_goal'